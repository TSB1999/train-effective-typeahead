[{"/Users/tsb99/Documents/App-Dev/REACT/train-effective/src/index.js":"1","/Users/tsb99/Documents/App-Dev/REACT/train-effective/src/App.js":"2","/Users/tsb99/Documents/App-Dev/REACT/train-effective/src/reportWebVitals.js":"3","/Users/tsb99/Documents/App-Dev/REACT/train-effective/src/IndexContext.js":"4","/Users/tsb99/Documents/App-Dev/REACT/train-effective/src/components/Interface.js":"5"},{"size":500,"mtime":1611747507357,"results":"6","hashOfConfig":"7"},{"size":375,"mtime":1611748170469,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1611326486776,"results":"9","hashOfConfig":"7"},{"size":84,"mtime":1611747453964,"results":"10","hashOfConfig":"7"},{"size":2558,"mtime":1611749345043,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1a06ei0",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/Users/tsb99/Documents/App-Dev/REACT/train-effective/src/index.js",[],"/Users/tsb99/Documents/App-Dev/REACT/train-effective/src/App.js",["23"],"/Users/tsb99/Documents/App-Dev/REACT/train-effective/src/reportWebVitals.js",[],"/Users/tsb99/Documents/App-Dev/REACT/train-effective/src/IndexContext.js",[],"/Users/tsb99/Documents/App-Dev/REACT/train-effective/src/components/Interface.js",["24","25","26","27","28","29","30","31"],"import React, { useEffect, useState, useContext } from \"react\";\nimport { IndexContext } from \"../IndexContext\";\n\nimport useSWR from \"swr\";\n\nconst fetcher = (...args) => fetch(...args).then((res) => res.json());\n\nexport default function Interface() {\n  const [query, setQuery] = React.useState(\"\");\n  const [count, setCount] = React.useState(0);\n  const [caughtCount, setCaughtCount] = React.useState(0);\n  const [called, setCalled] = React.useState(false);\n  const [indexArray, setIndexArray] = React.useState([0]);\n\n  //   const array = useContext(IndexContext);\n  const { value, setValue } = useContext(IndexContext);\n\n  // const { data, error } = useSWR(\n  //   `https://api.github.com/users/${query}`,\n  //   fetcher\n  // );\n\n  const handleRequest = (counter, query) => {\n    const index = query.length;\n    // console.log(index, value[value.length - 1] + 1);\n\n    if (caughtCount === count && caughtCount != 0 && count != 0) {\n      console.log(\"Calling from GitHub\", index);\n      setCalled(true);\n    } else {\n      setCalled(false);\n      console.log(\"never mind\", index); //index characters\n      setTimeout(() => {\n        if (!called) {\n            console.log(index, value[value.length - 1] + 1);\n          // if index is not the biggest then never mind\n          //   if (index === value[value.length -1] + 1) {\n          //     console.log(\"Calling from GitHub-2\", index);\n          //   }\n\n        //   if (value[value.length - 1] + 1 != index) {\n        //   }\n        }\n      }, [1000]);\n    }\n\n    setCount(1);\n    setCaughtCount(1);\n    setCalled(false);\n  };\n\n  const handleTextChange = (e) => {\n    e.preventDefault();\n\n    const searchQuery = e.target.value;\n\n    // setIndexArray([...indexArray, searchQuery.length]);\n    setValue([...value, searchQuery.length]);\n    console.log(value, \"contetr\");\n\n    setQuery(e.target.value);\n    setCount(count + 1);\n    setTimeout(() => {\n      setCaughtCount(caughtCount + 1);\n      handleRequest(count, searchQuery);\n    }, 300);\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        name=\"song\"\n        placeholder=\"Search for GitHub users...\"\n        value={query}\n        onChange={(e) => handleTextChange(e)}\n      />\n      {/* <div className=\"divider\"/> */}\n\n      {/* <div className=\"drop-down-item-container\">\n        <div className=\"image-container\">\n          <img src={data.avatar_url} className=\"profile-image\" />\n        </div>\n        <div className = \"user-name-container\">\n          <h1>{JSON.stringify(data)}</h1>\n        </div>\n      </div> */}\n    </div>\n  );\n}\n",{"ruleId":"32","severity":1,"message":"33","line":1,"column":17,"nodeType":"34","messageId":"35","endLine":1,"endColumn":26},{"ruleId":"32","severity":1,"message":"33","line":1,"column":17,"nodeType":"34","messageId":"35","endLine":1,"endColumn":26},{"ruleId":"32","severity":1,"message":"36","line":1,"column":28,"nodeType":"34","messageId":"35","endLine":1,"endColumn":36},{"ruleId":"32","severity":1,"message":"37","line":4,"column":8,"nodeType":"34","messageId":"35","endLine":4,"endColumn":14},{"ruleId":"32","severity":1,"message":"38","line":6,"column":7,"nodeType":"34","messageId":"35","endLine":6,"endColumn":14},{"ruleId":"32","severity":1,"message":"39","line":13,"column":10,"nodeType":"34","messageId":"35","endLine":13,"endColumn":20},{"ruleId":"32","severity":1,"message":"40","line":13,"column":22,"nodeType":"34","messageId":"35","endLine":13,"endColumn":35},{"ruleId":"41","severity":1,"message":"42","line":27,"column":46,"nodeType":"43","messageId":"44","endLine":27,"endColumn":48},{"ruleId":"41","severity":1,"message":"42","line":27,"column":60,"nodeType":"43","messageId":"44","endLine":27,"endColumn":62},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useSWR' is defined but never used.","'fetcher' is assigned a value but never used.","'indexArray' is assigned a value but never used.","'setIndexArray' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected"]